#!/bin/bash

# ARG_OPTIONAL_BOOLEAN([add],[a],[Create a new resource])
# ARG_OPTIONAL_BOOLEAN([delete],[d],[Delete a resource])
# ARG_OPTIONAL_BOOLEAN([list],[l],[List available resources])
# ARG_OPTIONAL_BOOLEAN([purge],[z],[Delete file-system contents])
# ARG_POSITIONAL_SINGLE([operation],[o],[ATOM, MOLECULE, ADDON, APIM or DCP])
# ARG_OPTIONAL_SINGLE([name],[n],[The name of the resource])
# ARG_OPTIONAL_SINGLE([chart],[b],[The name of the chart to install])
# ARG_OPTIONAL_SINGLE([path],[p],[Default /run/desktop/mnt/host/c/Boomi\ AtomSphere])
# ARG_OPTIONAL_SINGLE([port],[x],[The port to use for the service])
# ARG_OPTIONAL_SINGLE([token],[t],[The Installer Token for the Boomi Runtime component])
# ARG_OPTIONAL_SINGLE([vm],[v],[ATOM_VMOPTIONS_OVERRIDES - (Optional) A | (pipe) separated list of vm options to set on a new installation])
# ARG_OPTIONAL_SINGLE([container],[c],[CONTAINER_PROPERTIES_OVERRIDES - (Optional) A | (pipe) separated list of container properties to set on a new installation])
# ARG_OPTIONAL_SINGLE([node],[e],[Externally accesible port for the service > must be between 30000 - 32767])
# ARG_DEFAULTS_POS()
# ARG_HELP([boomi STATUS\nboomi START\nboomi [ATOM | MOLECULE | APIM | DCP] --add    --name NAME --chart CHART [--token TOKEN] [--path PATH] [--vm VM_OPTIONS] [--container CONTAINER_OPTIONS]\nboomi [ATOM | MOLECULE | APIM | DCP] --delete --name NAME --chart CHART [--purge]\nboomi ADDON --add    --name NAME --chart CHART [--port PORT] [--path PATH] [--node NODEPORT]\nboomi ADDON --delete --name NAME --chart CHART [--purge]\nboomi ADDON --list\nboomi BOOTSTRAP\nboomi BOOTSTRAP --name NAME [--token TOKEN]])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='adlznbpxtvceh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_operation="ATOM, MOLECULE, ADDON, APIM or DCP"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_add="off"
_arg_delete="off"
_arg_list="off"
_arg_purge="off"
_arg_name=
_arg_chart=
_arg_path=
_arg_port=
_arg_token=
_arg_vm=
_arg_container=
_arg_node=


print_help()
{
	printf '%s\n' "boomi STATUS
boomi START
boomi [ATOM | MOLECULE | APIM | DCP] --add    --name NAME --chart CHART [--token TOKEN] [--path PATH] [--vm VM_OPTIONS] [--container CONTAINER_OPTIONS]
boomi [ATOM | MOLECULE | APIM | DCP] --delete --name NAME --chart CHART [--purge]
boomi ADDON --add    --name NAME --chart CHART [--port PORT] [--path PATH] [--node NODEPORT]
boomi ADDON --delete --name NAME --chart CHART [--purge]
boomi ADDON --list
boomi BOOTSTRAP
boomi BOOTSTRAP --name NAME [--token TOKEN]"
	printf 'Usage: %s [-a|--(no-)add] [-d|--(no-)delete] [-l|--(no-)list] [-z|--(no-)purge] [-n|--name <arg>] [-b|--chart <arg>] [-p|--path <arg>] [-x|--port <arg>] [-t|--token <arg>] [-v|--vm <arg>] [-c|--container <arg>] [-e|--node <arg>] [-h|--help] [<operation>]\n' "$0"
	printf '\t%s\n' "<operation>: o (default: 'ATOM, MOLECULE, ADDON, APIM or DCP')"
	printf '\t%s\n' "-a, --add, --no-add: Create a new resource (off by default)"
	printf '\t%s\n' "-d, --delete, --no-delete: Delete a resource (off by default)"
	printf '\t%s\n' "-l, --list, --no-list: List available resources (off by default)"
	printf '\t%s\n' "-z, --purge, --no-purge: Delete file-system contents (off by default)"
	printf '\t%s\n' "-n, --name: The name of the resource (no default)"
	printf '\t%s\n' "-b, --chart: The name of the chart to install (no default)"
	printf '\t%s\n' "-p, --path: Default /run/desktop/mnt/host/c/Boomi\ AtomSphere (no default)"
	printf '\t%s\n' "-x, --port: The port to use for the service (no default)"
	printf '\t%s\n' "-t, --token: The Installer Token for the Boomi Runtime component (no default)"
	printf '\t%s\n' "-v, --vm: ATOM_VMOPTIONS_OVERRIDES - (Optional) A | (pipe) separated list of vm options to set on a new installation (no default)"
	printf '\t%s\n' "-c, --container: CONTAINER_PROPERTIES_OVERRIDES - (Optional) A | (pipe) separated list of container properties to set on a new installation (no default)"
	printf '\t%s\n' "-e, --node: Externally accesible port for the service > must be between 30000 - 32767 (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-a|--no-add|--add)
				_arg_add="on"
				test "${1:0:5}" = "--no-" && _arg_add="off"
				;;
			-a*)
				_arg_add="on"
				_next="${_key##-a}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-a" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-d|--no-delete|--delete)
				_arg_delete="on"
				test "${1:0:5}" = "--no-" && _arg_delete="off"
				;;
			-d*)
				_arg_delete="on"
				_next="${_key##-d}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-l|--no-list|--list)
				_arg_list="on"
				test "${1:0:5}" = "--no-" && _arg_list="off"
				;;
			-l*)
				_arg_list="on"
				_next="${_key##-l}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-l" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-z|--no-purge|--purge)
				_arg_purge="on"
				test "${1:0:5}" = "--no-" && _arg_purge="off"
				;;
			-z*)
				_arg_purge="on"
				_next="${_key##-z}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-z" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-n|--name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_name="$2"
				shift
				;;
			--name=*)
				_arg_name="${_key##--name=}"
				;;
			-n*)
				_arg_name="${_key##-n}"
				;;
			-b|--chart)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_chart="$2"
				shift
				;;
			--chart=*)
				_arg_chart="${_key##--chart=}"
				;;
			-b*)
				_arg_chart="${_key##-b}"
				;;
			-p|--path)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_path="$2"
				shift
				;;
			--path=*)
				_arg_path="${_key##--path=}"
				;;
			-p*)
				_arg_path="${_key##-p}"
				;;
			-x|--port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_port="$2"
				shift
				;;
			--port=*)
				_arg_port="${_key##--port=}"
				;;
			-x*)
				_arg_port="${_key##-x}"
				;;
			-t|--token)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_token="$2"
				shift
				;;
			--token=*)
				_arg_token="${_key##--token=}"
				;;
			-t*)
				_arg_token="${_key##-t}"
				;;
			-v|--vm)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_vm="$2"
				shift
				;;
			--vm=*)
				_arg_vm="${_key##--vm=}"
				;;
			-v*)
				_arg_vm="${_key##-v}"
				;;
			-c|--container)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_container="$2"
				shift
				;;
			--container=*)
				_arg_container="${_key##--container=}"
				;;
			-c*)
				_arg_container="${_key##-c}"
				;;
			-e|--node)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_node="$2"
				shift
				;;
			--node=*)
				_arg_node="${_key##--node=}"
				;;
			-e*)
				_arg_node="${_key##-e}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_operation "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

SCRIPT=`realpath $0`
SCRIPTPATH=`dirname $SCRIPT`

kubectl() {
  kubectl.exe "$@"
}


function fileReplace() {
  cat $1 | sed "s#{{uname}}#${_arg_name}#g" | sed "s#{{name}}#${lname}#g" | sed "s#{{path}}#${_arg_path}#g" | sed "s#{{token}}#${_arg_token}#g" | sed "s#{{vm}}#${_arg_vm}#g" | sed "s#{{container}}#${_arg_container}#g" | sed "s#{{port}}#${xport}#g" | sed "s#{{node}}#${xnode}#g"
}

if [ "$_arg_path" = "" ];
then
  _arg_path="/run/desktop/mnt/host/c/Boomi AtomSphere"
  printf "default path $_arg_path\n"
fi

if [ "$_arg_operation" = "ATOM" ] || [ "$_arg_operation" = "MOLECULE" ] || [ "$_arg_operation" = "APIM" ] || [ "$_arg_operation" = "DCP" ];
then
  # Checking for ${add} and ${delete} not set
  if [ "$_arg_add" != on ] && [ "$_arg_delete" != on ];
  then
    print_help
    exit
  elif [ "$_arg_add" = on ] && [ "$_arg_delete" = on ];
  then
    print_help
    exit
  fi

  xhostpath="$(echo "$_arg_path" | sed "s#/run/desktop##g" | sed "s#host/##g")"

  # Bypass token for DCP
  if [ "$_arg_operation" = "DCP" ];
  then
    _arg_token="DCP"
    if [ $(cat "$SCRIPTPATH/kubernetes/dcp/config.default" | jq 'has("folders")') = "true" ];
    then
      for xfolder in $(cat "$SCRIPTPATH/kubernetes/dcp/config.default" | jq --raw-output '.folders[]')
      do
        mkdir -p "$xhostpath/DCP_$_arg_name/$xfolder"
      done
    fi
  fi

  # Checking params
  if [ "$_arg_add" = on ] && ( [ "$_arg_name" = "" ] || [ "$_arg_path" = "" ] || [ "$_arg_token" = "" ] || [ "$_arg_chart" = "" ] );
  then
    print_help
    exit
  elif [ "$_arg_delete" = on ] && ( [ "$_arg_name" = "" ] || [ "$_arg_chart" = "" ] );
  then
    print_help
    exit
  fi

  if [ "$_arg_operation" = "MOLECULE" ];
  then
    op="molecule"
    _arg_path=$_arg_path/Molecule_$_arg_name
  elif [ "$_arg_operation" = "ATOM" ];
  then
    op="atom"
    _arg_path=$_arg_path/Atom_$_arg_name
  elif [ "$_arg_operation" = "APIM" ];
  then
    op="apim"
    _arg_path=$_arg_path/Gateway_$_arg_name
  elif [ "$_arg_operation" = "DCP" ];
  then
    op="catalog"
    _arg_path=$_arg_path/DCP_$_arg_name
  fi

  xhostpath="$(echo "$_arg_path" | sed "s#/run/desktop##g" | sed "s#host/##g")"

  # Apply ${operation} with Replacements

  lname=${_arg_name,,}

  echo "host path $xhostpath"
  mkdir -p "$xhostpath"

  if [ "$_arg_delete" = on ];
  then
    helm uninstall ${op}-${lname} -n ${op}-${lname}
    kubectl delete namespace ${op}-${lname}

    if [ "$_arg_purge" = on ];
    then
      echo "cleaning up $xhostpath"
      rm -rf "$xhostpath"
    fi
  elif [ "$_arg_add" = on ];
  then
    echo "host path $xhostpath"
    mkdir -p "$xhostpath"
    helm install ${op}-${lname} $_arg_chart --set runtime.token=$_arg_token --set runtime.name=$_arg_name --create-namespace --namespace ${op}-${lname}
  fi
elif [ "$_arg_operation" = "ADDON" ];
then
  if [ "$_arg_add" != on ] && [ "$_arg_delete" != on ] && [ "$_arg_list" != on ];
  then
    print_help
    exit
  fi

  if [ "$_arg_list" = on ];
  then
    helm search repo boomi
  elif [ "$_arg_add" = on ];
  then
    if [ "$_arg_name" = "" ] || [ "$_arg_chart" = "" ];
    then
      print_help
      exit
    fi

    echo "ADDON add"
  elif [ "$_arg_delete" = on ];
  then
    if [ "$_arg_name" = "" ] || [ "$_arg_chart" = "" ];
    then
      print_help
      exit
    fi

    echo "ADDON delete"
  fi
elif [ "$_arg_operation" = "START" ];
then
  kubectl proxy &

  location=$PWD
  cd $SCRIPTPATH

  kubectl apply -f tools/dashboard > /dev/null 2>&1
  kubectl apply -f tools/nginx > /dev/null 2>&1
  kubectl apply -f tools/metrics > /dev/null 2>&1

  cd $location
elif [ "$_arg_operation" = "STATUS" ];
then
  $SCRIPTPATH/status.sh
elif [ "$_arg_operation" = "BOOTSTRAP" ];
then
  $SCRIPTPATH/bootstrap.sh $_arg_name $_arg_token
else
  print_help
  exit
fi

# ] <-- needed because of Argbash
